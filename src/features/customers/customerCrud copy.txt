import LoadingSpinner from '@/components/loading-spinner1.gif';
import { Button } from "@/components/ui/button";
import { zodResolver } from '@hookform/resolvers/zod';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { SubmitHandler, useForm } from 'react-hook-form';
import * as z from 'zod';

// Definisikan skema validasi menggunakan Zod
const customerSchema = z.object({
    name: z.string().min(1, { message: 'Name is required' }),
    email: z.string().email({ message: 'Invalid email address' }).min(1, { message: 'Email is required' }),
    phone: z.string().optional(),
    address: z.string().optional(),
});

type CustomerFormData = z.infer<typeof customerSchema>;

interface Customer {
    id?: number;
    name: string;
    email: string;
    phone: string;
    address: string;
}

const CustomerCrud: React.FC = () => {
    const [customers, setCustomers] = useState<Customer[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);

    // Inisialisasi useForm dengan skema validasi Zod
    const {
        register,
        handleSubmit,
        reset,
        formState: { errors },
        setValue,
    } = useForm<CustomerFormData>({
        resolver: zodResolver(customerSchema),
    });

    useEffect(() => {
        const fetchCustomers = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await axios.get('http://localhost:8000/api/customers');
                // Access the customer data correctly              
                const customerData = response.data.data; // Adjusted to access the array
                setCustomers(customerData);
            } catch (err) {
                setError('Failed to fetch customers');
            } finally {
                setLoading(false);
            }
        };

        fetchCustomers();
    }, []);

    const handleNavigate = async () => {
        try {
            window.location.href = 'http://localhost:5174/tasks';
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center h-screen">
                <img src={LoadingSpinner} alt="Loading..." className="w-24 h-24" />
            </div>
        );
    }

    if (error) return <p>Error: {error}</p>;

    const handleCreateCustomer: SubmitHandler<CustomerFormData> = async (data) => {
        setLoading(true);
        setError(null);
        try {
            const response = await axios.post('http://localhost:8000/api/customers', data);
            setCustomers([...customers, response.data.data]); // Assuming the response contains the created customer
            reset(); // Reset form
            setEditingCustomer(null); // Clear editing state
        } catch (err) {
            setError('Failed to create customer');
        } finally {
            setLoading(false);
        }
    };

    const handleEditCustomer = (customer: Customer) => {
        setEditingCustomer(customer);
        setValue('name', customer.name);
        setValue('email', customer.email);
        setValue('phone', customer.phone || '');
        setValue('address', customer.address || '');
    };

    const handleUpdateCustomer: SubmitHandler<CustomerFormData> = async (data) => {
        if (editingCustomer) {
            try {
                const response = await axios.put(`http://localhost:8000/api/customers/${editingCustomer.id}`, data);
                setCustomers(customers.map(c => (c.id === editingCustomer.id ? response.data.data : c))); // Update the customer in the list
                reset(); // Reset form
                setEditingCustomer(null); // Clear editing state
            } catch (err) {
                setError('Failed to update customer');
            } finally {
                setLoading(false);
            }
        }
    };

    const handleDeleteCustomer = async (id: number) => {
        try {
            await axios.delete(`http://localhost:8000/api/customers/${id}`);
            setCustomers(customers.filter(customer => customer.id !== id)); // Remove the deleted customer from the list
        } catch (err) {
            setError('Failed to delete customer');
        }
    };

    return (
        <div className="p-4">
            <h1 className="text-2xl font-bold mb-4">Customers</h1>
            <Button onClick={handleNavigate} className="text-white p-2 rounded mb-4">
                Go to Tasks
            </Button>
            {error && <p className="text-red-500 mb-4">Error: {error}</p>}
            <form onSubmit={handleSubmit(editingCustomer ? handleUpdateCustomer : handleCreateCustomer)}>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
                        Name
                    </label>
                    <input
                        type="text"
                        id="name"
                        className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.name ? 'border-red-500' : ''}`}
                        {...register('name')}
                    />
                    {errors.name && <p className="text-red-500 text-xs italic mt-1">{errors.name.message}</p>}
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
                        Email
                    </label>
                    <input
                        type="email"
                        id="email"
                        className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.email ? 'border-red-500' : ''}`}
                        {...register('email')}
                    />
                    {errors.email && <p className="text-red-500 text-xs italic mt-1">{errors.email.message}</p>}
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="phone">
                        Phone
                    </label>
                    <input
                        type="text"
                        id="phone"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        {...register('phone')}
                    />
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="address">
                        Address
                    </label>
                    <input
                        type="text"
                        id="address"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        {...register('address')}
                    />
                </div>
                <Button type="submit" className="text-white p-2 rounded">
                    {editingCustomer ? 'Update Customer' : 'Add Customer'}
                </Button>
            </form>
            <hr className="my-4" />
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {customers.map(customer => (
                    <div key={customer.id} className="p-4 border rounded shadow">
                        <h2 className="text-lg font-bold mb-2">{customer.name}</h2>
                        <p className="text-gray-700 mb-2">Email: {customer.email}</p>
                        <p className="text-gray-700 mb-2">Phone: {customer.phone || 'N/A'}</p>
                        <p className="text-gray-700 mb-2">Address: {customer.address || 'N/A'}</p>
                        <div className="flex justify-between">
                            <Button onClick={() => handleEditCustomer(customer)} className="text-white p-2 rounded bg-blue-500">
                                Edit
                            </Button>
                            <Button onClick={() => handleDeleteCustomer(customer.id!)} className="text-white p-2 rounded bg-red-500">
                                Delete
                            </Button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default CustomerCrud;
