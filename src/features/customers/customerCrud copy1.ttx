import LoadingSpinner from '@/components/loading-spinner1.gif';
import { Button } from "@/components/ui/button";
import axios from 'axios';
import React, { useEffect, useState } from 'react';

interface Customer {
    id?: number;
    name: string;
    email: string;
    phone: string;
    address: string;
}

const customerCrud: React.FC = () => {
    const [customer, setCustomer] = useState<Customer>({ name: '', email: '', phone: '', address: '' });
    const [loading, setLoading] = useState<boolean>(false);
    const [isEditing, setIsEditing] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);


    useEffect(() => {
        const query = new URLSearchParams(location.search);
        const id = query.get('id');

        if (id) {
            setIsEditing(true);
            const fetchCustomer = async () => {
                setLoading(true);
                setError(null);
                try {
                    const response = await axios.get(`http://localhost:8000/api/customers/${id}`);
                    setCustomer(response.data.data);
                } catch (err) {
                    setError('Failed to fetch customer data');
                } finally {
                    setLoading(false);
                }
            };

            fetchCustomer();
        }
    }, [location]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setError(null);

        try {
            if (isEditing) {
                await axios.put(`http://localhost:8000/api/customers/${customer.id}`, customer);
            } else {
                await axios.post('http://localhost:8000/api/customers', customer);
            }
            // Redirect back to the list page after success
            window.location.href = '/customers';
        } catch (err) {
            setError('Failed to save customer data');
        } finally {
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center h-screen">
                <img src={LoadingSpinner} alt="Loading..." className="w-24 h-24" />
            </div>
        );
    }

    return (
        <div>
            <h1>{isEditing ? 'Edit Customer' : 'Add Customer'}</h1>
            {error && <p>Error: {error}</p>}
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    placeholder="Name"
                    value={customer.name}
                    onChange={(e) => setCustomer({ ...customer, name: e.target.value })}
                    required
                />
                <input
                    type="email"
                    placeholder="Email"
                    value={customer.email}
                    onChange={(e) => setCustomer({ ...customer, email: e.target.value })}
                    required
                />
                <input
                    type="text"
                    placeholder="Phone"
                    value={customer.phone}
                    onChange={(e) => setCustomer({ ...customer, phone: e.target.value })}
                />
                <input
                    type="text"
                    placeholder="Address"
                    value={customer.address}
                    onChange={(e) => setCustomer({ ...customer, address: e.target.value })}
                />
                <Button type="submit">
                    {isEditing ? 'Update Customer' : 'Add Customer'}
                </Button>
            </form>
        </div>
    );
};

export default customerCrud;
