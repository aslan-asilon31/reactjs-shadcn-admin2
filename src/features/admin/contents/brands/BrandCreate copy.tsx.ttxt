import { Header } from '@/components/layout/header'
import { Main } from '@/components/layout/main'
import LoadingSpinner from '@/components/loading-spinner1.gif'
import { ProfileDropdown } from '@/components/profile-dropdown'
import { Search } from '@/components/search'
import { ThemeSwitch } from '@/components/theme-switch'
import { Button } from "@/components/ui/button"
import { useState } from 'react'
import { z } from 'zod'
import BrandsProvider from './context/brands-context'


interface Brand {
  id?: string; 
  name: string;
}

const brandSchema = z.object({
  id: z.string().optional(),
  name: z.string().min(1, "Name is required"),
});

export default function BrandCreate() {
    const [brand, setBrand] = useState<Brand>({ name: '' });
    const [loading, setLoading] = useState<boolean>(false);
    const [isEditing, setIsEditing] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);



  if (loading) {
      return (
          <div className="flex justify-center items-center h-screen">
              <img src={LoadingSpinner} alt="Loading..." className="w-24 h-24" />
          </div>
      );
  }



  return (
    <BrandsProvider>
      <Header fixed>
        <Search />
        <div className='ml-auto flex items-center space-x-4'>
          <ThemeSwitch />
          <ProfileDropdown />
        </div>
      </Header>

      <Main>
        <div className='mb-2 flex flex-wrap items-center justify-between space-y-2'>
          <div>
            <h2 className='text-2xl font-bold tracking-tight'>Brand Create</h2>
          </div>
        </div>
        <div className='-mx-4 flex-1 overflow-auto px-4 py-1 lg:flex-row lg:space-x-12 lg:space-y-0'>


        <h1 className="form-title">{isEditing ? 'Edit Brand' : 'Add Brand'}</h1>
                {error && <p className="error-message">Error: {error}</p>}


                <form action="http://localhost:8000/api/product-brands/store" method="post" className="brand-form">
                    <div className="form-group">
                        <label htmlFor="name" className="form-label">Name</label>
                        <input
                            type="text"
                            id="name"
                            placeholder="Enter customer name"
                            value={brand.name}
                            onChange={(e) => setBrand({ ...brand, name: e.target.value })}
                            required
                            className="form-input"
                        />
                    </div>
                  
                  
                    <Button type="submit" className="submit-button">
                        {isEditing ? 'Update Customer' : 'Add Customer'}
                    </Button>
                </form>

          {/* <BrandsTable data={brandList} columns={columns} /> */}
        </div>
      </Main>

    </BrandsProvider>
  )
}
